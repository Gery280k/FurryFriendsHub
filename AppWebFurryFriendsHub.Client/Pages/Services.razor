@page "/Services"
@inject HttpClient Http
@inject IJSRuntime JS

<link href="css/styles.css" rel="stylesheet" />

<PageTitle>Servicios</PageTitle>

<h1>Agendar Cita para Servicio</h1>

<p>Selecciona un servicio, una fecha y una hora para agendar una cita para tu mascota.</p>

@if (servicios == null)
{
    <p><em>Cargando servicios...</em></p>
}
else
{
    <div>
        <label for="servicio">Servicio:</label>
        <select id="servicio" @bind="servicioSeleccionado">
            @foreach (var servicio in servicios)
            {
                <option value="@servicio.Id">@servicio.Nombre</option>
            }
        </select>
    </div>
    <div>
        <label for="fecha">Fecha:</label>
        <input type="date" id="fecha" @bind="fechaSeleccionada" />
    </div>
    <div>
        <label for="hora">Hora:</label>
        <select id="hora" @bind="horaSeleccionada">
            @foreach (var timeSlot in horariosDisponibles)
            {
                <option value="@timeSlot">@timeSlot</option>
            }
        </select>
    </div>
    <button class="btn" @onclick="AgendarServicio" disabled="@(!FormularioValido)">Agendar Cita</button>

    <!-- Mensaje de confirmación flotante -->
    @if (mostrarConfirmacion)
    {
        <div class="mensaje-flotante show">
            <p>Cita confirmada exitosamente para el servicio seleccionado.</p>
        </div>
    }

    @if (mensaje != null)
    {
        <p>@mensaje</p>
    }
}

@code {
    private List<Servicio>? servicios;
    private int servicioSeleccionado;
    private DateTime fechaSeleccionada;
    private string horaSeleccionada = string.Empty;
    private string? mensaje;
    private bool mostrarConfirmacion = false;

    private bool FormularioValido =>
        servicioSeleccionado > 0 && fechaSeleccionada != default && !string.IsNullOrEmpty(horaSeleccionada);

    private List<string> horariosDisponibles = new List<string>
    {
        "09:00", "09:30", "10:00", "10:30", "11:00", "11:30",
        "12:00", "12:30", "13:00", "13:30", "14:00", "14:30",
        "15:00", "15:30", "16:00", "16:30"
    };

    protected override async Task OnInitializedAsync()
    {
        // para que en el campo de hora se ponga hoy + 1 =mañana como sugerencia
        fechaSeleccionada = DateTime.Today.AddDays(1);

        // Lista pra los servicios, despues vemos como lo pasamos a una bd,
        servicios = new List<Servicio>
        {
            new Servicio { Id = 1, Nombre = "Consulta Veterinaria" },
            new Servicio { Id = 2, Nombre = "Corte de Pelo" },
            new Servicio { Id = 3, Nombre = "Baño y Aseo" },
            new Servicio { Id = 4, Nombre = "Vacunación" }
        };
    }

    private async Task AgendarServicio()
    {
        mensaje = $"Cita agendada para {servicios.FirstOrDefault(s => s.Id == servicioSeleccionado)?.Nombre} el {fechaSeleccionada.ToShortDateString()} a las {horaSeleccionada}.";
        mostrarConfirmacion = true;

        // 3 seg para el mensaje de confirmacion de la cita 
        await Task.Delay(3000);
        mostrarConfirmacion = false;
        StateHasChanged();  // Refresca el componente para reflejar cambios
    }

    public class Servicio
    {
        public int Id { get; set; }
        public string Nombre { get; set; } = string.Empty;
    }
}
