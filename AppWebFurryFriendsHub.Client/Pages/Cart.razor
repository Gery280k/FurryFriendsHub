@inject CartService CartService
@inject IJSRuntime JSRuntime

<div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasRight" aria-labelledby="offcanvasRightLabel" data-bs-backdrop="false">
    <div class="offcanvas-header">
        <h5 id="offcanvasRightLabel">Mi Carrito</h5>
        <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body d-flex flex-column justify-content-between">
        <div>
            @if (!CartService.Items.Any())
            {
                <p>El carrito está vacío.</p>
            }
            else
            {
                @foreach (var item in CartService.Items)

                {
                    <div class="d-flex mb-3">
                        <div class="col-3 d-flex align-items-center justify-content-center">
                            <img src="@item.Product.imageUrl" alt="@item.Product.name" class="card-img" style="width:70px; height:70px;" />
                        </div>
                        <div class="d-flex flex-column col-6 justify-content-between">
                            <div class="header">
                                <h6 class="fs-6">@item.Product.name</h6>
                            </div>
                            <div class="d-flex flex-column justify-content-start gap-0 p-0 m-0">
                                <p class="p-0 m-0 fs-5">$@(item.Product.price * item.Quantity)</p>
                            </div>
                        </div>
                        <div class="d-flex flex-column justify-content-between col-3">
                            <div class="d-flex justify-content-end">
                                <button style="background-color: transparent; border:none; width:25px;" @onclick="() => RemoveFromCart(item.Product.Id)"><img style="width:25px; height:25px;" src="/images/borrar.png"></button>
                            </div>
                            <div class="btn-group btn-group-sm quantity-controls">
                                <button type="button" class="btn btn-light btn-outline-secondary fw-bold" @onclick="() => UpdateQuantity(item.Product.Id, item.Quantity - 1)">-</button>
                                <button type="button" class="btn btn-light border-secondary fw-bold" disabled>@item.Quantity</button>
                                <button type="button" class="btn btn-light btn-outline-secondary fw-bold" @onclick="() => UpdateQuantity(item.Product.Id, item.Quantity + 1)">+</button>
                            </div>
                        </div>
                    </div>
                    <hr />
                }
            }
        </div>
        @if (CartService.Items.Any())

        {
            <div class="border-top pt-3">
                <div class="d-flex justify-content-between">
                    <h6>Total:</h6>
                    <h6>$@CartService.Items.Sum(item => item.Product.price * item.Quantity)</h6>
                </div>
                <button class="btn btn-primary w-100 mt-3" data-bs-toggle="modal" data-bs-target="#orderDetailsModal">Comprar</button>
            </div>
        }
    </div>
</div>

<div class="modal fade" id="orderDetailsModal" tabindex="-1" aria-labelledby="orderDetailsModalLabel" aria-hidden="true" data-bs-backdrop="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="orderDetailsModalLabel">Mi Pedido</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (!CartService.Items.Any())
                {
                    <p>No hay productos en el pedido.</p>
                }
                else
                {
                    <ul class="list-group">
                        @foreach (var item in CartService.Items)
                        {
                            <li class="list-group-item">
                                <div class="d-flex align-items-center">
                                    <!-- Imagen del producto -->
                                    <img src="@item.Product.imageUrl" alt="@item.Product.name" class="img-thumbnail me-3" style="width: 70px; height: 70px;" />
                                    <!-- Detalles del producto -->
                                    <div class="flex-grow-1">
                                        <strong>@item.Product.name</strong> <br />
                                        Cantidad: @item.Quantity
                                    </div>
                                    <!-- Precio -->
                                    <div>
                                        <span>$@(item.Product.price * item.Quantity)</span>
                                    </div>
                                </div>
                            </li>
                        }
                    </ul>
                    <div class="mt-3">
                        <h6 class="text-end">Total: $@CartService.Items.Sum(item => item.Product.price * item.Quantity)</h6>
                    </div>

                    <div id="paypal-button-container"></div>


                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" @onclick="ConfirmPurchase">Confirmar Compra</button>

            </div>
        </div>
    </div>
</div>

@code {
    private string SelectedPaymentMethod { get; set; } = "PayPal";



    private decimal TotalAmount => CartService.Items.Sum(item => item.Product.price * item.Quantity);

    protected override void OnInitialized()

    {

        CartService.OnChange += StateHasChanged;

    }



    private void RemoveFromCart(string productId)

    {

        CartService.RemoveFromCart(productId);

    }



    private void UpdateQuantity(string productId, int quantity)

    {

        CartService.UpdateQuantity(productId, quantity);

        StateHasChanged();

    }


    public void Dispose()

    {

        CartService.OnChange -= StateHasChanged;

    }





    private void ConfirmPurchase()

    {

        Console.WriteLine($"Compra confirmada. Método de Pago: {SelectedPaymentMethod}");

        CartService.ClearCart(); // Vaciar el carrito después de la compra

    }



    protected override async Task OnAfterRenderAsync(bool firstRender)

    {

        if (firstRender)

        {

            var totalAmount = CartService.Items.Sum(item => item.Product.price * item.Quantity);

            await JSRuntime.InvokeVoidAsync("renderPayPalButton", totalAmount);

        }

    }

}
